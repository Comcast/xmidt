---
  primary:
    address: ":6000"
  health:
    address: ":6001"
    options:
      - "PayloadsOverZero"
      - "PayloadsOverHundred"
      - "PayloadsOverThousand"
      - "PayloadsOverTenThousand"
  pprof:
    address: ":6002"
  metric:
    address: ":6003"
    metricsOptions:
      namespace: "xmidt"
      subsystem: "caduceus"
  log:
    file: "stdout"
    level: "DEBUG"
    json: true
  env: test
  fqdn: caduceus
  scheme: http

  numWorkerThreads: 10
  jobQueueSize: 10
  sender:
    numWorkersPerSender: 5000
    queueSizePerSender: 100000
    cutOffPeriod: 10s
    linger: 180s
    clientTimeout: 60s
    deliveryRetries: 1
    deliveryInterval: 10ms
    responseHeaderTimeout: 10s
  profilerFrequency: 15
  profilerDuration: 15
  profilerQueueSize: 100
  totalIncomingPayloadSizeBuckets:
    - 100
    - 1000
    - 10000
  perSourceIncomingPayloadSizeBuckets:
    - 100
    - 1000
    - 10000

########################################
#   Webhook Related Configuration
########################################
# cacheConfig configures the in memory storage of the webhooks. aka how long webhooks should live etc.
  cacheConfig:
    # ttl is how long a webhook registration will last.
    # (Optional) defaults to 5m
    ttl: 5m

    # checkInterval is how long the internal crapper will check if the inMemory webhook should be removed.
    # (Optional) defaults to 1m
    checkInterval: 10s

  # Yggdrasil Config for storing the webhook information
  argusConfig:
    bucket: "webhooks-caduceus"
    address: "http://argus:6600"
    pullInterval: "2s"
    filters:
      stage: "dev"
  authHeader: ["dXNlcjpwYXNz"]

  service:
    defaultScheme: http
    consul:
      client:
        address: "consul0:8500"
        scheme: "http"
        waitTime: "30s"
      disableGenerateID: true
      vnodeCount: 211
      registrations:
        -
          id: "caduceus"
          name: "caduceus"
          tags:
            - "stage=dev"
            - "flavor=docker"
          address: "http://caduceus"
          scheme: "http"
          port: 6000
          checks:
            -
              checkID: "caduceus:http"
              http: "http://caduceus:6001/health"
              interval: "30s"
              deregisterCriticalServiceAfter: "70s"
